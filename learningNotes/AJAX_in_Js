
AJAX = Asynchronous JavaScript And XML.

XML = is simple based text format
AJAX is not a programming language.

======================================================
Asynchronous: Events will be performed in the background without blocking our DOM rendring.
    Means - events will be performed without re-loading complete web pages, other thing will be as it is.

AJAX is combination of javascript(XMLhttpobject) + XML
which allows you to make asynchornous call to server machine and to retrive data to update part of page without sending whole page to server.

How AJAX works:
    When an evernt occusr
    => It creates XMLHttpRequest Object
    => Sends HttpRequest
    => Process the returned data using JavaScript.
    => And updates the page content.


XMLHttpRequest Object:

✅ All modern browser support the XMLHttpRequest object.
✅ The XMLHttpRequest object can be used to exchange data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.
✅ Create an XMLHttpRequest object
✅ Define a callback function
✅ Open the XMLHttpRequest object
✅ Send a Request to a server.

Note - to run AJAX, we need one local server.

functions of XMLHttpRequest object:
    
    onprogress - optional. when request is in process.

    onload - when response has been downloaded and ready to print.

=======================================================
AJAX just uses a combination of:    A browser built-in XMLHttpRequest object (to request data from a web server), JavaScript and HTML DOM (to display or use the data)

AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.


How AJAX Works

1. An event occurs in a web page (the page is loaded, a button is clicked)
2. An XMLHttpRequest object is created by JavaScript
3. The XMLHttpRequest object sends a request to a web server
4. The server processes the request
5. The server sends a response back to the web page
6. The response is read by JavaScript
7. Proper action (like page update) is performed by JavaScript


The XMLHttpRequest Object
All modern browsers support the XMLHttpRequest object.

The XMLHttpRequest object can be used to exchange data with a server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.

The XMLHttpRequest object is used to exchange data with a server.

Send a Request To a Server
To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:

open(method, url, async)    specifies the type of request

    method: the type of request: GET or POST
    url:    the server (file) location
    async:  true (asynchronous) or false (synchronous)

send()  Sends the request to the server (used for GET)

GET or POST?
GET is simpler and faster than POST, and can be used in most cases.

However, always use POST requests when:

A cached file is not an option (update a file or database on the server).
Sending a large amount of data to the server (POST has no size limitations).
Sending user input (which can contain unknown characters), POST is more robust and secure than GET.

The onreadystatechange Property
The readyState property holds the status of the XMLHttpRequest.

The onreadystatechange property defines a function to be executed when the readyState changes.

The status property and the statusText property holds the status of the XMLHttpRequest object.


functions: 
    onreadystatechange  -  
    onreadystatechange in JavaScript is an event handler associated with the XMLHttpRequest object. It is triggered whenever the readyState property of the XMLHttpRequest changes during the lifecycle of an HTTP request. This allows developers to monitor the progress of the request and take appropriate actions based on its state.

    Key Points
        The readyState property has five possible values:

        0 (UNSENT): The request has been created but not yet opened.
        1 (OPENED): The request has been opened using open() but not yet sent.
        2 (HEADERS_RECEIVED): The request has been sent, and the headers have been received.
        3 (LOADING): The response body is being received (data is being downloaded).
        4 (DONE): The request is complete, and the response is fully received.

    The onreadystatechange function is executed every time the readyState changes.

    Example  - 
        const xhr = new XMLHttpRequest();
        xhr.open('GET', 'https://api.example.com/data', true);

        xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
            console.log('Response:', xhr.responseText); // Handle the response
        }
        };

        xhr.send();


        Explanation of the Example
        xhr.open(): Initializes the request.
        xhr.onreadystatechange: Defines a function to handle state changes.
        xhr.readyState === 4: Ensures the request is complete.
        xhr.status === 200: Confirms the request was successful (HTTP status 200).
        xhr.send(): Sends the request to the server.

        responseText: is the response provided by server, which we can show on console or on webpage.

        Modern Alternative
        While onreadystatechange is still widely used, modern JavaScript often uses the fetch API or libraries like Axios for simpler and more readable asynchronous HTTP requests.

